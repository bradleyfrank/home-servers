---

- name: Configure operating system
  hosts: all

  handlers:
    - name: Restart journald
      ansible.builtin.systemd:
        name: systemd-journald.service
        state: reloaded

    - name: Restart smartd
      ansible.builtin.systemd:
        name: smartmontools.service
        state: reloaded

    - name: Restart fwupd-refresh
      ansible.builtin.systemd:
        name: fwupd-refresh.service
        state: reloaded
        daemon_reload: true

  tasks:

    # === System Settings === #

    - name: Update hostname
      tags: hostname
      block:
        - name: Create entry in hosts file
          ansible.builtin.lineinfile:
            path: /etc/hosts
            search_string: "127.0.0.1 {{ ansible_hostname }}"
            line: "127.0.0.1 {{ inventory_hostname }}"
            owner: root
            group: root
            mode: 0644
        - name: Set hostname system-wide
          ansible.builtin.hostname:
            name: "{{ inventory_hostname }}"

    - name: Add DNS fallback
      tags: dns
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: '^#?FallbackDNS='
        line: FallbackDNS=9.9.9.9 1.1.1.1 8.8.8.8

    - name: Set timezone
      tags: ntp
      ansible.builtin.file:
        src: /usr/share/zoneinfo/America/New_York
        dest: /etc/localtime
        state: link
        force: true


    # === Packages === #

    - name: Install gpg keys
      tags: [packages, gpg]
      loop: "{{ repos }}"
      loop_control:
        label: "{{ item['name'] }}"
      ansible.builtin.apt_key:
        url: "{{ item['key'] | default(omit) }}"
        keyring: "{{ item['keyring'] | default(omit) }}"
        id: "{{ item['id'] | default(omit) }}"
        keyserver: "{{ item['keyserver'] | default(omit) }}"

    - name: Install repositories
      tags: [packages, repositories]
      loop: "{{ repos }}"
      loop_control:
        label: "{{ item['name'] }}"
      ansible.builtin.apt_repository:
        repo: "{{ item['repo'] }}"
        filename: "{{ item['name'] }}"

    - name: Install system packages
      tags: [packages, apt]
      ansible.builtin.apt:
        name: "{{ packages }}"
        state: present
        install_recommends: true
        update_cache: true


    # === Services === #

    - name: Start and enable services
      tags: services
      loop: "{{ services }}"
      ansible.builtin.systemd:
        state: started
        masked: false
        name: "{{ item }}"

    - name: Create smartd config file
      tags: [smartd, services]
      notify: Restart smartd
      ansible.builtin.template:
        src: conf/smartd.j2
        dest: /etc/smartd.conf
        mode: 0644

    - name: Enable persistent journald storage
      tags: [logs, services]
      notify: Restart journald
      community.general.ini_file:
        path: /etc/systemd/journald.conf
        section: Journal
        option: Storage
        value: auto
        no_extra_spaces: true
        mode: 0644

    - name: Patch fwupd-refresh
      tags: services
      block:
        - name: Create override directory
          ansible.builtin.file:
            path: /etc/systemd/system/fwupd-refresh.service.d
            owner: root
            group: root
            mode: 0750
            state: directory
        - name: Create override config file
          notify: Restart fwupd-refresh
          ansible.builtin.copy:
            src: conf/fwupd-refresh.conf
            dest: /etc/systemd/system/fwupd-refresh.service.d/override.conf
            mode: 0644

    - name: Mask nfs-blkmap
      tags: services
      ansible.builtin.systemd:
        name: nfs-blkmap.service
        masked: true


    # === Security Settings === #

    - name: Install cockpit ufw profile
      tags: security
      ansible.builtin.copy:
        src: conf/cockpit.ufw
        dest: /etc/ufw/applications.d/cockpit
        mode: 0644

    - name: Enable UFW
      tags: [security, firewall]
      community.general.ufw:
        state: enabled
        default: deny
        logging: "on"

    - name: Allow ports through firewall
      tags: [security, firewall]
      loop: "{{ ufw_rules }}"
      loop_control:
        label: "{{ item['desc'] }}"
      community.general.ufw:
        name: "{{ item['name'] | default(omit) }}"
        port: "{{ item['port'] | default(omit) }}"
        rule: "{{ item['rule'] | default('allow') }}"

    - name: Secure SSH settings
      tags: [security, ssh]
      vars:
        ssh_kex:
          - sntrup761x25519-sha512@openssh.com
          - curve25519-sha256@libssh.org
          - diffie-hellman-group-exchange-sha256
        ssh_allow_users: "{{ users | map(attribute='name') | join(' ') }} deploy"
        sftp_enabled: true
      ansible.builtin.import_role:
        name: devsec.hardening.ssh_hardening

    - name: Secure OS settings
      tags: security
      ansible.builtin.import_role:
        name: devsec.hardening.os_hardening


    # === Utilities === #

    - name: Create msmtprc
      tags: smtp
      ansible.builtin.template:
        src: conf/msmtprc.j2
        dest: /root/.msmtprc
        mode: 0644

    - name: Install mail.rc config
      tags: smtp
      ansible.builtin.copy:
        src: conf/mail.rc
        dest: /etc/mail.rc
        mode: 0644


    # === Users === #

    - name: Create local users
      tags: users
      loop: "{{ users }}"
      loop_control:
        label: "{{ item['name'] }}"
      ansible.builtin.user:
        name: "{{ item['name'] }}"
        shell: "{{ item['shell'] | default('/usr/bin/bash') }}"
        groups: "{{ item['groups'] }}"

    - name: Install dotfiles
      tags: users
      loop: "{{ users }}"
      loop_control:
        label: "{{ item['name'] }}"
      ansible.builtin.copy:
        src: "home/{{ item['name'] }}/"
        dest: "/home/{{ item['name'] }}"
        owner: "{{ item['name'] }}"
        group: "{{ item['name'] }}"
        mode: 0644

    - name: Add ssh key to authorized_keys
      tags: [users, ssh]
      loop: "{{ users }}"
      loop_control:
        label: "{{ item['name'] }}"
      ansible.posix.authorized_key:
        user: "{{ item['name'] }}"
        key: "{{ item['key'] }}"


    # === ZFS datasets === #

    - name: Create ZFS datasets
      tags: zfs
      loop: "{{ zfs['datasets'] }}"
      when: zfs['datasets'] is defined
      community.general.zfs:
        name: "{{ item }}"
        state: present


    # === Backups === #

    - name: Grant syncoid sudo permissions
      tags: [users, backups]
      community.general.sudoers:
        name: syncoid
        state: present
        user: syncoid
        commands: ALL
